<?php

/**
 * @file
 * Installation file for Behat Runner module.
 */

use Symfony\Component\Yaml\Parser;
use Symfony\Component\Yaml\Dumper;

/**
 * Implements hook_composer_dependencies_install().
 *
 * This will get called on install, but after composer_manager
 * has finished installing all composer dependencies.
 */
function behatrunner_composer_dependencies_install() {
  module_load_include('inc', 'behatrunner', 'includes/behatrunner');
  composer_manager_register_autoloader();

  global $base_url;
  $filename = drupal_get_path('module', 'behatrunner') . '/default.behat.yml';

  // Load default behat.yml configuration.
  $parser = new Symfony\Component\Yaml\Parser();
  $behat_conf = $parser->parse(file_get_contents($filename));

  // Modify configuration.
  $behat_conf['default']['extensions']['Behat\MinkExtension\Extension']['base_url'] = $base_url;
  $behat_conf['default']['extensions']['Drupal\DrupalExtension\Extension']['drupal']['drupal_root'] = DRUPAL_ROOT;

  // Write to file.
  $dumper = new Symfony\Component\Yaml\Dumper();
  $dumper->setIndentation(2);
  $yaml = $dumper->dump($behat_conf, PHP_INT_MAX);
  $dest_dir = 'public://behatrunner';
  $output_dir = file_prepare_directory($dest_dir, FILE_CREATE_DIRECTORY);
  $destination = 'public://behatrunner/behat.yml';

  file_unmanaged_save_data($yaml, $destination, FILE_EXISTS_RENAME);
}


/**
 * Implements hook_schema().
 */
function behatrunner_schema() {
  $schema['behatrunner_scenario'] = array(
    'description' => 'The base table for behatrunner test locations.',
    'fields' => array(
      'bsid' => array(
        'description' => 'The Behat scenario id.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'blid' => array(
        'description' => 'The Behat log id the most recent run for this scenario. NULL if database logging is disabled.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'feature' => array(
        'type' => 'varchar',
        'length' => 256,
        'not null' => FALSE,
        'description' => 'The feature to which the Behat scenario belongs.',
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 256,
        'not null' => FALSE,
        'description' => 'The title of the Behat scenario.',
      ),
      'location' => array(
        'type' => 'varchar',
        'length' => 256,
        'not null' => TRUE,
        'description' => 'The location of the tests, relative to the Drupal base.',
      ),
      'module' => array(
        'type' => 'varchar',
        'length' => 256,
        'not null' => TRUE,
        'description' => 'This module to which this scenario belongs.',
      ),
    ),
    'primary key' => array('bsid'),
  );
  $schema['behatrunner_log'] = array(
    'description' => 'A log of behat runner runs.',
    'fields' => array(
      'blid' => array(
        'description' => 'The Behat log id.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'bsid' => array(
        'description' => 'The Behat scenario id for this log entry.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'duration' => array(
        'description' => 'Duration of the scenario run.',
        'type' => 'float',
        'not null' => TRUE,
      ),
      'assertions' => array(
        'description' => 'Number of assertions for the scenario.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
      'message' => array(
        'description' => 'Message generated by Behat.',
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'status' => array(
        'description' => 'Boolean indicating whether scenario run passed or failed. 0 = failed, 1 = passed.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
      'timestamp' => array(
        'description' => 'Unix timestamp of when scenario was run.',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('blid'),
    'indexes' => array(
      'bsid' => array('bsid'),
    ),
  );

  return $schema;
}

// @todo Implement hook_requirements(), require libraries in composer.json.

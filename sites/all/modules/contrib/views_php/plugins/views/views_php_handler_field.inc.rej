--- plugins/views/views_php_handler_field.inc
+++ plugins/views/views_php_handler_field.inc
@@ -44,7 +44,7 @@
     $form += views_php_form_element($this,
       FALSE,
       array('php_value', t('Value code'), t('Code to construct the value of this field.'), FALSE),
-      array('$view', '$handler', '$static')
+      array('$view', '$handler', '$static', '$row')
     );
     $form += views_php_form_element($this,
       array('use_php_click_sortable', t('Enable click sort'), t('If checked, you can use PHP code to enable click sort on the field.')),
@@ -128,10 +128,19 @@
   function php_post_execute() {
     // Execute value PHP code.
     if (!empty($this->options['php_value'])) {
-      $function = create_function('$view, $handler, &$static', $this->options['php_value'] . ';');
+      $function = create_function('$view, $handler, &$static, $row', $this->options['php_value'] . ';');
       ob_start();
       foreach ($this->view->result as $i => &$row) {
-        $row->{$this->field_alias} = $function($this->view, $this, $this->php_static_variable);
+        $normalized_row = new stdClass;
+        foreach ($this->view->display_handler->get_handlers('field') as $field => $handler) {
+          // Do not add our own field. Also, do not add other fields that have no data yet. This occurs because
+          // the value code is evaluated in hook_views_post_execute(), but field data is made available in hook_views_pre_render(),
+          // which is called after hook_views_post_execute().
+          if ((empty($handler->aliases) || empty($handler->aliases['entity_type'])) && $handler->field_alias != $this->field_alias) {
+            $normalized_row->$field = isset($row->{$handler->field_alias}) ? $row->{$handler->field_alias} : NULL;
+          }
+        }
+        $row->{$this->field_alias} = $function($this->view, $this, $this->php_static_variable, $normalized_row);
       }
       ob_end_clean();
     }
